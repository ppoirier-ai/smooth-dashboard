datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model PortfolioSnapshot {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  timestamp DateTime @default(now())
  totalValue Float
  netValue   Float
  assetBalances AssetBalance[]
  marginLoans   MarginLoan[]

  @@index([userId])
}

model AssetBalance {
  id          String   @id @default(cuid())
  asset       String   // BTC, SOL, USDT
  quantity    Float
  entryPrice  Float
  accountType String   // spot, margin, futures, bot
  snapshot    PortfolioSnapshot @relation(fields: [snapshotId], references: [id])
  snapshotId  String
}

model MarginLoan {
  id          String   @id @default(cuid())
  asset       String
  amount      Float
  interestRate Float
  interestPaid Float
  healthRatio  Float
  snapshot     PortfolioSnapshot @relation(fields: [snapshotId], references: [id])
  snapshotId   String
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  passwordHash    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLogin       DateTime?
  binanceAccounts BinanceAccount[]
  portfolios      PortfolioSnapshot[]
  emailVerified   DateTime?
  image           String?
  sessions        Session[]
  accounts        Account[]
  apiKeys         ApiKey[]
}

model BinanceAccount {
  id            String   @id @default(cuid())
  userId        String
  apiKeyId      String
  encryptedKey  String
  apiKeyIV      String
  apiKeyTag     String
  apiSecret     String
  secretKeyIV   String
  secretKeyTag  String
  viewToken     String  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  apiKey        ApiKey   @relation(fields: [apiKeyId], references: [id])
}

model ApiKey {
  id              String           @id @default(cuid())
  name            String
  userId          String
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id])
  binanceAccounts BinanceAccount[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 